buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'de.thetaphi:forbiddenapis:3.9'
    }
}

plugins {
    id 'java-library'
    id 'maven-publish'
    // https://github.com/researchgate/gradle-release
    id 'net.researchgate.release' version '3.0.2'
    id 'io.codearte.nexus-staging' version '0.30.0'

    // https://gradle-pitest-plugin.solidsoft.info/
    id 'info.solidsoft.pitest' version '1.9.11'
}

apply plugin: 'de.thetaphi.forbiddenapis'
apply plugin: 'jacoco'
apply plugin: 'signing'

java {
	  toolchain {
		  sourceCompatibility = JavaVersion.VERSION_17
	  }
}

group = 'org.dstadler'
archivesBaseName = 'commons-audio'

repositories {
    mavenCentral()
}

forbiddenApis {
    suppressAnnotations = ['org.dstadler.commons.util.SuppressForbidden']
    // 'jdk-unsafe'
    bundledSignatures = [ 'jdk-system-out', 'jdk-non-portable', 'jdk-deprecated', 'jdk-reflection',
        'commons-io-unsafe-2.18.0', 'jdk-internal' ]
}
forbiddenApisMain {
    signaturesFiles += files('config/forbidden-apis/forbidden.signatures.txt')
}

dependencies {
    implementation 'org.dstadler:commons-dost:1.3.5'
    implementation 'org.apache.commons:commons-lang3:3.17.0'
    implementation 'commons-io:commons-io:2.19.0'
    implementation 'org.apache.httpcomponents:httpclient:4.5.14'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.18.3'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.18.3'
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    implementation 'com.google.guava:guava:33.4.8-jre'

    // MP3 SPI, used for playback
    implementation 'com.googlecode.soundlibs:mp3spi:1.9.5.4'
    implementation 'com.googlecode.soundlibs:vorbisspi:1.0.3.3'

    // JLayerPlayer, used for playback
    implementation 'com.googlecode.soundlibs:jlayer:1.0.1.4'

    // for TarsosDSP sound stretching functionality
    implementation fileTree(dir: 'lib', include: ['*.jar'])

    // binary serialization of data during shutdown
    implementation 'de.undercouch:bson4jackson:2.15.1'

    // provide a logging.properties only when running the example, but
    // don't include it in the jar-file
    runtimeOnly files('src/runtime/resources')

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.13.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.13.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.13.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.13.1'

    testImplementation 'org.dstadler:commons-test:1.0.0.22'
	testImplementation 'org.apache.commons:commons-rng-simple:1.6'
}

wrapper {
    gradleVersion = '8.14.2'
}

test {
    maxHeapSize = "256m"
    systemProperties = System.properties

    // enable to show standard out and standard error of the test JVM(s) on the console
    // testLogging.showStandardStreams = true

    // http://forums.gradle.org/gradle/topics/jacoco_related_failure_in_multiproject_build
    systemProperties['user.dir'] = workingDir

    // avoid failures because Gradle provides it's own version of JNA in the system properties
    systemProperties['jna.boot.library.path'] = null
    useJUnitPlatform()
}

jacoco {
    toolVersion = '0.8.13'
}

jacocoTestReport {
    reports {
        xml.required = true
    }
}

jacocoTestReport {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: 'org/dstadler/audio/example/**')
        }))
    }
}

tasks.register('sourcesJar', Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allJava
}

tasks.register('javadocJar', Jar) {
    archiveClassifier = 'javadoc'
    from javadoc
}


java {
    withJavadocJar()
    withSourcesJar()
}

release {
    git {
        requireBranch.set('master')
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = archivesBaseName
            from components.java

            pom {
                name = 'Common Audio Utilities'
                description = 'Common utilities I find useful when developing audio-related projects.'
                url = 'https://github.com/centic9/commons-audio'
                licenses {
                    license {
                        name = 'BSD 2-Clause "Simplified" License'
                        url = 'https://github.com/centic9/commons-audio/blob/master/LICENSE.md'
                    }
                }
                developers {
                    developer {
                        id = 'centic9'
                        name = 'Dominik Stadler'
                    }
                }
                scm {
                    connection = 'scm:git@github.com:centic9/commons-audio'
                    developerConnection = 'scm:git@github.com:centic9/commons-audio'
                    url = 'https://github.com/centic9/commons-audio'
                }
            }
        }
    }
    repositories {
        maven {
            // change to point to your repo, e.g. http://my.org/repo
            //url = layout.buildDirectory.dir('repo')
            url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            credentials(PasswordCredentials)
            //snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/')
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

afterReleaseBuild.dependsOn publish
