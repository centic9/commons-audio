buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'de.thetaphi:forbiddenapis:3.1'
	}
}

plugins {
	// https://github.com/researchgate/gradle-release
	id 'net.researchgate.release' version '2.8.1'
    id 'io.codearte.nexus-staging' version '0.22.0'
}

apply plugin: 'java'
apply plugin: 'de.thetaphi.forbiddenapis'
apply plugin: 'jacoco'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'io.codearte.nexus-staging'

sourceCompatibility = 1.8
group = 'org.dstadler'
archivesBaseName = 'commons-audio'

repositories {
	mavenCentral()
}

forbiddenApis {
	suppressAnnotations = ['org.dstadler.commons.util.SuppressForbidden']
	bundledSignatures = [ 'jdk-reflection', 'commons-io-unsafe-2.8.0', 'jdk-internal' ]
}
forbiddenApisMain {
	// 'jdk-unsafe', 'jdk-system-out'
	bundledSignatures += [ 'jdk-deprecated', 'jdk-internal', 'jdk-non-portable' ]
	signaturesFiles += files('config/forbidden-apis/forbidden.signatures.txt')
}

dependencies {
    compile 'org.dstadler:commons-dost:1.0.0.32'
    compile 'com.fasterxml.jackson.core:jackson-core:2.12.1'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.12.1'
    compile 'com.google.code.findbugs:jsr305:3.0.2'
    compile 'com.google.guava:guava:30.1-jre'

    // Can be removed after commons-dost 1.0.0.32 or newer is included
    compile 'commons-io:commons-io:2.8.0'

    // MP3 SPI, used for playback
    compile 'com.googlecode.soundlibs:mp3spi:1.9.5.4'
    compile 'com.googlecode.soundlibs:vorbisspi:1.0.3.3'

    // JLayerPlayer, used for playback
    compile 'com.googlecode.soundlibs:jlayer:1.0.1.4'

    // for TarsosDSP sound stretching functionality
    compile fileTree(dir: 'lib', include: ['*.jar'])

    // binary serialization of data during shutdown
    compile 'de.undercouch:bson4jackson:2.11.0'

    // provide a logging.properties only when running the example, but
    // don't include it in the jar-file
    runtimeOnly files('src/runtime/resources')

    testCompile 'junit:junit:4.13.2'
    testCompile 'org.dstadler:commons-test:1.0.0.19'
}

wrapper {
    gradleVersion = '6.6.1'
}

task adjustWrapperPropertiesFile {
    doLast {
        ant.replaceregexp(match: '^#.*', replace: '', flags: 'g', byline: true) {
            fileset(dir: project.projectDir, includes: 'gradle/wrapper/gradle-wrapper.properties')
        }
        new File(project.projectDir, 'gradle/wrapper/gradle-wrapper.properties').with {
            it.text = it.readLines().findAll { it }.sort().join('\n')
        }
        ant.fixcrlf(file: 'gradle/wrapper/gradle-wrapper.properties', eol: 'lf')
    }
}
wrapper.finalizedBy adjustWrapperPropertiesFile

test {
	maxHeapSize = "256m"
	systemProperties = System.properties

	// enable to show standard out and standard error of the test JVM(s) on the console
	// testLogging.showStandardStreams = true

	// http://forums.gradle.org/gradle/topics/jacoco_related_failure_in_multiproject_build
	systemProperties['user.dir'] = workingDir

    // avoid failures because Gradle provides it's own version of JNA in the system properties
    systemProperties['jna.boot.library.path'] = null
}

jacoco {
	toolVersion = '0.8.7'
}

jacocoTestReport {
    reports {
        xml.enabled true
	}
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}

//provide defaults so we do not need to specify them always
if (!project.hasProperty('ossrhUsername')) {
    ext.ossrhUsername = ''
}
if (!project.hasProperty('ossrhPassword')) {
    ext.ossrhPassword = ''
}

uploadArchives {
  repositories {
    mavenDeployer {
      beforeDeployment { deployment -> signing.signPom(deployment) }

      repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      pom.project {
        name 'Common Autio Utilities'
        packaging 'jar'
        // optionally artifactId can be defined here
        description 'Common utilities I find useful when developing audio-related projects.'
        url 'https://github.com/centic9/commons-audio'

        scm {
          connection 'scm:git@github.com:centic9/commons-audio.git'
          developerConnection 'scm:git@github.com:centic9/commons-audio.git'
          url 'https://github.com/centic9/commons-audio'
        }

        licenses {
          license {
            name 'BSD 2-Clause License'
            url 'http://www.opensource.org/licenses/bsd-license.php'
          }
        }

        developers {
          developer {
            id 'centic9	'
            name 'Dominik Stadler'
          }
        }
      }
    }
  }
}

afterReleaseBuild.dependsOn uploadArchives
